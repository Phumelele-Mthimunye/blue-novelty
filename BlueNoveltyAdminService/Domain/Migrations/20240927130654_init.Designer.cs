// <auto-generated />
using System;
using Domain.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Domain.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240927130654_init")]
    partial class init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Models.Entities.CleaningRequest", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<long?>("CustomerId")
                        .HasColumnType("bigint")
                        .HasColumnName("customer_Id");

                    b.Property<DateTime?>("DateOfRequest")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("dateOfRequest");

                    b.Property<long?>("HouseholdDetailId")
                        .IsRequired()
                        .HasColumnType("bigint")
                        .HasColumnName("householdDetail_Id");

                    b.Property<long?>("ServiceProviderId")
                        .HasColumnType("bigint")
                        .HasColumnName("serviceProvider_Id");

                    b.Property<int>("Status")
                        .HasColumnType("integer")
                        .HasColumnName("status");

                    b.Property<decimal?>("TotalPrice")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("totalPrice");

                    b.Property<long?>("customerId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("HouseholdDetailId");

                    b.HasIndex("ServiceProviderId");

                    b.HasIndex("customerId");

                    b.ToTable("CleaningRequests");
                });

            modelBuilder.Entity("Domain.Models.Entities.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Domain.Models.Entities.HouseholdCleaningPricing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("CleaningTask")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("cleaningTask");

                    b.Property<string>("CleaningTaskDescription")
                        .HasColumnType("text")
                        .HasColumnName("cleaningTaskDescription");

                    b.Property<decimal?>("Price")
                        .IsRequired()
                        .HasColumnType("numeric")
                        .HasColumnName("price");

                    b.HasKey("Id");

                    b.ToTable("HouseholdCleaningPricings");
                });

            modelBuilder.Entity("Domain.Models.Entities.HouseholdDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<bool?>("Cabinets")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("cabinets");

                    b.Property<bool?>("Fridge")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("fridge");

                    b.Property<bool?>("Garage")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("garage");

                    b.Property<bool?>("Laundry")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("laundry");

                    b.Property<int?>("NumberOfBathrooms")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("numberOfBathrooms");

                    b.Property<int?>("NumberOfBedrooms")
                        .IsRequired()
                        .HasColumnType("integer")
                        .HasColumnName("numberOfBedrooms");

                    b.Property<bool?>("Walls")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("walls");

                    b.Property<bool?>("Windows")
                        .IsRequired()
                        .HasColumnType("boolean")
                        .HasColumnName("windows");

                    b.HasKey("Id");

                    b.ToTable("HouseholdDetails");
                });

            modelBuilder.Entity("Domain.Models.Entities.Service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<string>("ServiceDescription")
                        .HasColumnType("text")
                        .HasColumnName("serviceDescription");

                    b.Property<string>("ServiceName")
                        .HasColumnType("text")
                        .HasColumnName("serviceName");

                    b.HasKey("Id");

                    b.ToTable("Services");
                });

            modelBuilder.Entity("Domain.Models.Entities.ServiceProvider", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("Active")
                        .HasColumnType("boolean")
                        .HasColumnName("active");

                    b.Property<DateTime?>("DateOfBirth")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("DateOfBirth");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("FirstName");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("PhoneNumber");

                    b.Property<string>("PrefferedLanguage")
                        .HasColumnType("text")
                        .HasColumnName("PrefferedLanguage");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Username");

                    b.HasKey("Id");

                    b.ToTable("ServiceProviders");
                });

            modelBuilder.Entity("Domain.Models.Entities.CleaningRequest", b =>
                {
                    b.HasOne("Domain.Models.Entities.HouseholdDetail", "HouseholdDetail")
                        .WithMany("CleaningRequests")
                        .HasForeignKey("HouseholdDetailId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Domain.Models.Entities.ServiceProvider", "ServiceProvider")
                        .WithMany("CleaningRequests")
                        .HasForeignKey("ServiceProviderId");

                    b.HasOne("Domain.Models.Entities.Customer", "Customer")
                        .WithMany("CleaningRequests")
                        .HasForeignKey("customerId");

                    b.Navigation("Customer");

                    b.Navigation("HouseholdDetail");

                    b.Navigation("ServiceProvider");
                });

            modelBuilder.Entity("Domain.Models.Entities.Customer", b =>
                {
                    b.Navigation("CleaningRequests");
                });

            modelBuilder.Entity("Domain.Models.Entities.HouseholdDetail", b =>
                {
                    b.Navigation("CleaningRequests");
                });

            modelBuilder.Entity("Domain.Models.Entities.ServiceProvider", b =>
                {
                    b.Navigation("CleaningRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
